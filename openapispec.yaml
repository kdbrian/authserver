openapi: 3.0.3
info:
  title: Authentication API
  description: API for user authentication and account management.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /register:
    post:
      summary: Register a new user
      description: Creates a new user account with email, password, and phone number.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
                phone:
                  type: string
                  example: +254712345678
              required:
                - email
                - password
      responses:
        '200':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: user@example.com
                      phone:
                        type: string
                        example: +254712345678
        '400':
          description: Registration failed.
  /login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  username:
                    type: string
                    example: user@example.com
        '401':
          description: Invalid username or password.
  /refreshSession:
    get:
      summary: Refresh user session
      description: Refreshes the user's session and returns a new JWT token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Session refreshed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Unauthorized.
  /deleteAccount:
    delete:
      summary: Delete user account
      description: Deletes the authenticated user's account.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deleted successfully.
        '401':
          description: Unauthorized.
  /logout:
    get:
      summary: Logout user
      description: Logs out the authenticated user by deleting their session.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully.
        '401':
          description: Unauthorized.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT